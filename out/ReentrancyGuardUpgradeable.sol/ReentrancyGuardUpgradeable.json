{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/oz-custom/contracts/oz-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":oz-custom/=node_modules/oz-custom/\"]},\"sources\":{\"node_modules/oz-custom/contracts/oz-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x71cf7f66d423ff53373959a935a376cda8957f8e1c899f7e80b93db20936b33e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49cfc69d5690ca021f87741ab592207a2c7d0d42165e8ef7c877b7e8ed1ccb02\",\"dweb:/ipfs/QmNT4XAgqg3ey6ApMwiRsrJXDp3k1ndVGw2Dyv6wuc9gMv\"]},\"node_modules/oz-custom/contracts/oz-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"keccak256\":\"0x6d8e18af42ae611231cb9a9061f0ffa9374e235da6313eb21832da70d04dfe31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://32f21a7375dfdb91ae8252b62f9c2c2af689d441b8a0fc8ed36fc8f4dc7f55df\",\"dweb:/ipfs/QmXaXkMRQ7ceiSYhvKUYX2sGpRDLKskQYdA4iBjWFQ5jSp\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "version",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":eth-gas-reporter/=node_modules/eth-gas-reporter/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat/=node_modules/hardhat/",
        ":oz-custom/=node_modules/oz-custom/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 1000000
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "node_modules/oz-custom/contracts/oz-upgradeable/security/ReentrancyGuardUpgradeable.sol": "ReentrancyGuardUpgradeable"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/oz-custom/contracts/oz-upgradeable/proxy/utils/Initializable.sol": {
        "keccak256": "0x71cf7f66d423ff53373959a935a376cda8957f8e1c899f7e80b93db20936b33e",
        "urls": [
          "bzz-raw://49cfc69d5690ca021f87741ab592207a2c7d0d42165e8ef7c877b7e8ed1ccb02",
          "dweb:/ipfs/QmNT4XAgqg3ey6ApMwiRsrJXDp3k1ndVGw2Dyv6wuc9gMv"
        ],
        "license": "MIT"
      },
      "node_modules/oz-custom/contracts/oz-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
        "keccak256": "0x6d8e18af42ae611231cb9a9061f0ffa9374e235da6313eb21832da70d04dfe31",
        "urls": [
          "bzz-raw://32f21a7375dfdb91ae8252b62f9c2c2af689d441b8a0fc8ed36fc8f4dc7f55df",
          "dweb:/ipfs/QmXaXkMRQ7ceiSYhvKUYX2sGpRDLKskQYdA4iBjWFQ5jSp"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "node_modules/oz-custom/contracts/oz-upgradeable/security/ReentrancyGuardUpgradeable.sol",
    "id": 7751,
    "exportedSymbols": {
      "Initializable": [
        7426
      ],
      "Initializable__AlreadyInitialized": [
        7262
      ],
      "Initializable__Initializing": [
        7258
      ],
      "Initializable__NotInitializing": [
        7260
      ],
      "ReentrancyGuardUpgradeable": [
        7750
      ],
      "ReentrancyGuard__Locked": [
        7700
      ]
    },
    "nodeType": "SourceUnit",
    "src": "97:2732:47",
    "nodes": [
      {
        "id": 7697,
        "nodeType": "PragmaDirective",
        "src": "97:23:47",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 7698,
        "nodeType": "ImportDirective",
        "src": "121:42:47",
        "nodes": [],
        "absolutePath": "node_modules/oz-custom/contracts/oz-upgradeable/proxy/utils/Initializable.sol",
        "file": "../proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 7751,
        "sourceUnit": 7427,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 7700,
        "nodeType": "ErrorDefinition",
        "src": "165:32:47",
        "nodes": [],
        "errorSelector": "c0d27a97",
        "name": "ReentrancyGuard__Locked",
        "nameLocation": "171:23:47",
        "parameters": {
          "id": 7699,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "194:2:47"
        }
      },
      {
        "id": 7750,
        "nodeType": "ContractDefinition",
        "src": "950:1878:47",
        "nodes": [
          {
            "id": 7705,
            "nodeType": "VariableDeclaration",
            "src": "1766:23:47",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "_locked",
            "nameLocation": "1782:7:47",
            "scope": 7750,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 7704,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1766:7:47",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "id": 7714,
            "nodeType": "FunctionDefinition",
            "src": "1796:111:47",
            "nodes": [],
            "body": {
              "id": 7713,
              "nodeType": "Block",
              "src": "1856:51:47",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 7710,
                      "name": "__ReentrancyGuard_init_unchained",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7724,
                      "src": "1866:32:47",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 7711,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1866:34:47",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 7712,
                  "nodeType": "ExpressionStatement",
                  "src": "1866:34:47"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 7708,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 7707,
                  "name": "onlyInitializing",
                  "nameLocations": [
                    "1839:16:47"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 7388,
                  "src": "1839:16:47"
                },
                "nodeType": "ModifierInvocation",
                "src": "1839:16:47"
              }
            ],
            "name": "__ReentrancyGuard_init",
            "nameLocation": "1805:22:47",
            "parameters": {
              "id": 7706,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1827:2:47"
            },
            "returnParameters": {
              "id": 7709,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1856:0:47"
            },
            "scope": 7750,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 7724,
            "nodeType": "FunctionDefinition",
            "src": "1913:98:47",
            "nodes": [],
            "body": {
              "id": 7723,
              "nodeType": "Block",
              "src": "1983:28:47",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 7721,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7719,
                      "name": "_locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7705,
                      "src": "1993:7:47",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 7720,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2003:1:47",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1993:11:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 7722,
                  "nodeType": "ExpressionStatement",
                  "src": "1993:11:47"
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 7717,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 7716,
                  "name": "onlyInitializing",
                  "nameLocations": [
                    "1966:16:47"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 7388,
                  "src": "1966:16:47"
                },
                "nodeType": "ModifierInvocation",
                "src": "1966:16:47"
              }
            ],
            "name": "__ReentrancyGuard_init_unchained",
            "nameLocation": "1922:32:47",
            "parameters": {
              "id": 7715,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1954:2:47"
            },
            "returnParameters": {
              "id": 7718,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1983:0:47"
            },
            "scope": 7750,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 7744,
            "nodeType": "ModifierDefinition",
            "src": "2388:147:47",
            "nodes": [],
            "body": {
              "id": 7743,
              "nodeType": "Block",
              "src": "2412:123:47",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 7729,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 7727,
                      "name": "_locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7705,
                      "src": "2426:7:47",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "32",
                      "id": 7728,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2437:1:47",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "src": "2426:12:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 7733,
                  "nodeType": "IfStatement",
                  "src": "2422:50:47",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 7730,
                        "name": "ReentrancyGuard__Locked",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7700,
                        "src": "2447:23:47",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 7731,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2447:25:47",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 7732,
                    "nodeType": "RevertStatement",
                    "src": "2440:32:47"
                  }
                },
                {
                  "expression": {
                    "id": 7736,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7734,
                      "name": "_locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7705,
                      "src": "2483:7:47",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "32",
                      "id": 7735,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2493:1:47",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_2_by_1",
                        "typeString": "int_const 2"
                      },
                      "value": "2"
                    },
                    "src": "2483:11:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 7737,
                  "nodeType": "ExpressionStatement",
                  "src": "2483:11:47"
                },
                {
                  "id": 7738,
                  "nodeType": "PlaceholderStatement",
                  "src": "2505:1:47"
                },
                {
                  "expression": {
                    "id": 7741,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 7739,
                      "name": "_locked",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7705,
                      "src": "2517:7:47",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 7740,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2527:1:47",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "2517:11:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 7742,
                  "nodeType": "ExpressionStatement",
                  "src": "2517:11:47"
                }
              ]
            },
            "documentation": {
              "id": 7725,
              "nodeType": "StructuredDocumentation",
              "src": "2017:366:47",
              "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
            },
            "name": "nonReentrant",
            "nameLocation": "2397:12:47",
            "parameters": {
              "id": 7726,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2409:2:47"
            },
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 7749,
            "nodeType": "VariableDeclaration",
            "src": "2800:25:47",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 7745,
              "nodeType": "StructuredDocumentation",
              "src": "2541:254:47",
              "text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
            },
            "mutability": "mutable",
            "name": "__gap",
            "nameLocation": "2820:5:47",
            "scope": 7750,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$49_storage",
              "typeString": "uint256[49]"
            },
            "typeName": {
              "baseType": {
                "id": 7746,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2800:7:47",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 7748,
              "length": {
                "hexValue": "3439",
                "id": 7747,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "2808:2:47",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_49_by_1",
                  "typeString": "int_const 49"
                },
                "value": "49"
              },
              "nodeType": "ArrayTypeName",
              "src": "2800:11:47",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
                "typeString": "uint256[49]"
              }
            },
            "visibility": "private"
          }
        ],
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 7702,
              "name": "Initializable",
              "nameLocations": [
                "998:13:47"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7426,
              "src": "998:13:47"
            },
            "id": 7703,
            "nodeType": "InheritanceSpecifier",
            "src": "998:13:47"
          }
        ],
        "canonicalName": "ReentrancyGuardUpgradeable",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 7701,
          "nodeType": "StructuredDocumentation",
          "src": "199:750:47",
          "text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          7750,
          7426
        ],
        "name": "ReentrancyGuardUpgradeable",
        "nameLocation": "968:26:47",
        "scope": 7751,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 47
}